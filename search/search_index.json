{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FasterAPI","text":"<p>As the name suggested, this is a open source project that aims to make FastAPI more easier to use, aka <code>Faster!</code> Although FastAPI is a fantastic framework, it troubles me that it does not include a authentication pipeline. Hence, I created this project which builts a JWT autehntication pipeline as the offcial documentation suggested. Additionally, some important configuration are linked with environment variables &amp; yaml files for convenience.</p> <p>Please feel free to use it as the baseline for your next project!</p> <p>We have been using it as a quick startup for our projects at Innovation Centre Perth. Welcome all visitors!</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install FasterAPI==0.0.32\n</code></pre> <p><code>Note:</code> Latest version is changing to a CLI toolkit which is still under development.</p>"},{"location":"about/","title":"About Me","text":"<p>Hello, I'm <code>Dr Yifei Ren</code>!</p> <p>I am <code>Technology Lead</code> (Technical Project Manager) at Innovation Centre Perth. All welcome to visit us for potential collaborations!</p>"},{"location":"about/#contact-information","title":"Contact Information","text":"<ul> <li>Email: yifei.ren@curtin.edu.au</li> <li>LinkedIn: https://www.linkedin.com/in/yifei-ren-8b021311a/</li> <li>GitHub: https://github.com/ulfaric</li> </ul>"},{"location":"api/","title":"Installation","text":"<pre><code>pip install -U FasterAPI\n</code></pre> <p>All dependencies will be automatically installed, this includes everything from FastAPI. The SQL driver is using <code>psycopg2-binary</code>. </p> <p>To start with default configuration, simply create a python file with the following content:</p> <pre><code>import uvicorn\nfrom FasterAPI.utils import init_migration, create_superuser\n\nif __name__ == \"__main__\":\n    # create a superuser, optional\n    create_superuser(\n        username=\"admin\",\n        password=\"admin\",\n        first_name=\"admin\",\n        last_name=\"admin\",\n        email=\"admin@admin.com\"\n    )\n    # start the fastapi app\n    uvicorn.run(\"FasterAPI.app:app\", host=\"127.0.0.1\", log_level=\"info\", reload=True)\n</code></pre> <p>Now you have a backend with JWT authentication pipeline up and running!</p>"},{"location":"api/endpoints/","title":"Built-in Endpoints","text":"<p>FastAPI automatically generated a endpoints documentation page based on swagger. You can access it via http://IP:PORT/docs, where <code>IP</code> and <code>PORT</code> is defined in your script that starts the server with uvicorn. <code>/docs</code> is the default URL, if you did not set <code>DOCS_URL</code> in your <code>meta_config.yaml</code>.</p>"},{"location":"api/models/active_session/","title":"Active Session","text":"<p>This model is used to store active session for users. It has a one-to-one relationship with <code>User</code> model. If multiple session is not allowed, user has to login again on any new device.</p> <p>             Bases: <code>Base</code></p> <p>Active session model</p> Source code in <code>FasterAPI\\models.py</code> <pre><code>class ActiveSession(Base):\n    \"\"\"Active session model\"\"\" \"\"\n\n    __tablename__ = \"active_sessions\"\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    username: Mapped[str] = mapped_column(\n        ForeignKey(\"users.username\"), index=True, unique=True\n    )\n    client: Mapped[str]\n    exp: Mapped[datetime]\n    user: Mapped[\"User\"] = relationship(\"User\", back_populates=\"session\")\n</code></pre>"},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.__tablename__","title":"<code>__tablename__ = 'active_sessions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.client","title":"<code>client: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.exp","title":"<code>exp: Mapped[datetime]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.user","title":"<code>user: Mapped[User] = relationship('User', back_populates='session')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/active_session/#FasterAPI.models.ActiveSession.username","title":"<code>username: Mapped[str] = mapped_column(ForeignKey('users.username'), index=True, unique=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/blacklisted_token/","title":"Blacklisted Token","text":"<p>This model stores the blacklisted JWT token after user logged out. It will be automatically cleared out at a configurable interval to keep the performance optimised.</p> <p>             Bases: <code>Base</code></p> <p>Blacklisted token model</p> Source code in <code>FasterAPI\\models.py</code> <pre><code>class BlacklistedToken(Base):\n    \"\"\"Blacklisted token model\"\"\" \"\"\n\n    __tablename__ = \"blacklisted_tokens\"\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    token: Mapped[str] = mapped_column(unique=True, index=True)\n    exp: Mapped[datetime]\n</code></pre>"},{"location":"api/models/blacklisted_token/#FasterAPI.models.BlacklistedToken.__tablename__","title":"<code>__tablename__ = 'blacklisted_tokens'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/blacklisted_token/#FasterAPI.models.BlacklistedToken.exp","title":"<code>exp: Mapped[datetime]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/blacklisted_token/#FasterAPI.models.BlacklistedToken.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/blacklisted_token/#FasterAPI.models.BlacklistedToken.token","title":"<code>token: Mapped[str] = mapped_column(unique=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user/","title":"User Model","text":"<p>This model is used to store user information.</p> <p>             Bases: <code>Base</code></p> <p>User model</p> Source code in <code>FasterAPI\\models.py</code> <pre><code>class User(Base):\n    \"\"\"User model\"\"\"\n\n    __tablename__ = \"users\"\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    username: Mapped[str] = mapped_column(unique=True, index=True)\n    first_name: Mapped[str]\n    last_name: Mapped[str]\n    email: Mapped[str]\n    hashed_password: Mapped[str]\n    is_superuser: Mapped[bool]\n    privileges: Mapped[List[\"UserPrivilege\"]] = relationship(\n        back_populates=\"user\", cascade=\"all,delete\"\n    )\n    session: Mapped[\"ActiveSession\"] = relationship(\n        back_populates=\"user\", cascade=\"all,delete\"\n    )\n</code></pre>"},{"location":"api/models/user/#FasterAPI.models.User.__tablename__","title":"<code>__tablename__ = 'users'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.email","title":"<code>email: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.first_name","title":"<code>first_name: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.hashed_password","title":"<code>hashed_password: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.is_superuser","title":"<code>is_superuser: Mapped[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.last_name","title":"<code>last_name: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.privileges","title":"<code>privileges: Mapped[List[UserPrivilege]] = relationship(back_populates='user', cascade='all,delete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.session","title":"<code>session: Mapped[ActiveSession] = relationship(back_populates='user', cascade='all,delete')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user/#FasterAPI.models.User.username","title":"<code>username: Mapped[str] = mapped_column(unique=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user_privilege/","title":"User Privilege","text":"<p>This model is used to store user privilege/scope. It has a many-to-one relationship with <code>User</code> model.</p> <p>             Bases: <code>Base</code></p> <p>User role model</p> Source code in <code>FasterAPI\\models.py</code> <pre><code>class UserPrivilege(Base):\n    \"\"\"User role model\"\"\"\n\n    __tablename__ = \"user_privileges\"\n    id: Mapped[int] = mapped_column(primary_key=True, index=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    privilege: Mapped[str]\n    user: Mapped[\"User\"] = relationship(\"User\", back_populates=\"privileges\")\n</code></pre>"},{"location":"api/models/user_privilege/#FasterAPI.models.UserPrivilege.__tablename__","title":"<code>__tablename__ = 'user_privileges'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user_privilege/#FasterAPI.models.UserPrivilege.id","title":"<code>id: Mapped[int] = mapped_column(primary_key=True, index=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user_privilege/#FasterAPI.models.UserPrivilege.privilege","title":"<code>privilege: Mapped[str]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/user_privilege/#FasterAPI.models.UserPrivilege.user","title":"<code>user: Mapped[User] = relationship('User', back_populates='privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/user_privilege/#FasterAPI.models.UserPrivilege.user_id","title":"<code>user_id: Mapped[int] = mapped_column(ForeignKey('users.id'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"guides/background_process/","title":"Background Process","text":"<p>The <code>FastAPI</code> allows you to create the lifespan as a startup background process. However, some timees you may want to add additional background process during run time. To solve this problem, I itergeated the other open source project <code>Akatosh</code>. To add a additional background process, simply user the <code>event</code> decorator with any functions!</p> <p>for exmaple:</p> <pre><code>from Akatosh.event import event\n\n@event(at=Mundus.time, till=inf)\ndef your_function:\n    pass\n</code></pre> <p>Add the above codes inside an endpoint function, then <code>your_function</code> will be run right away till forever! All event interaction supported by Akatosh applies!</p>"},{"location":"guides/configuration/","title":"Configuration","text":"<p>With FasterAPI, you could quickly configure your application via two files: <code>auth_config.yaml</code> and <code>meta_config.yaml</code>. These two files must sit besides your <code>main script</code>, such as the one shown under <code>Getting Started</code>. Otherwise, FasterAPI will use all default configurations. Note that you could also use envrionment variables but they will be overwrittern if configuration file exits.</p>"},{"location":"guides/configuration/#auth_configyaml","title":"auth_config.yaml","text":"<p>Here are all the keys for <code>auth_config.yaml</code>:</p> <pre><code>SQLALCHEMY_DATABASE_URL: 'sqlite:///dev.db' # \"postgresql://&lt;username&gt;:&lt;password&gt;@HOST:PORT/test\"\nSECRET_KEY: # random secret key for JWT creation, you can run openssl rand 32\nALGORITHM: \"HS256\" # hashing algorithm\nTOKEN_URL: \"login\" # url for user login\nTOKEN_EXPIRATION_TIME: 1 # JWT token expiration time in minutes\nALLOW_SELF_REGISTRATION: False # if true, anyone could register a user without autehntication, otherwise only superuser can do so.\n\n# following fields related to COSRF\nALLOW_CREDENTIALS: False\nALLOWED_ORIGINS:\n  - \"*\"\nALLOWED_METHODS:\n  - \"*\"\nALLOWED_HEADERS:\n  - \"*\"\n</code></pre>"},{"location":"guides/configuration/#meta_configyaml","title":"meta_config.yaml","text":"<p>Here are the keys for <code>meta_config.yaml</code>:</p> <pre><code>DEBUG: True\nTITLE: \"My API\"\nDESCRIPTION: \"This is a description of my API\"\nVERSION: \"0.0.2\"\nOPENAPI_URL: \"/openapi.json\"\nDOCS_URL: \"/docs\"\nREDOC_URL: \"/redoc\"\nTERMS_OF_SERVICE: \"\"\nCONTACT: \"\"\nSUMMARY: \"This is a summary of my API\"\nJAEGER_SVC_NAME: \"my-api\" # service name\nJAEGER_TRACE: True # enable tracing\nJAEGER_HOST: \"localhost\" # Jaeger host\nJAEGER_PORT: \"6831\" # Jaeger host port\n</code></pre>"},{"location":"guides/create_model/","title":"Create Model","text":"<p><code>FasterAPI</code> created a <code>Declarative Base</code> instance of SQLAlchemy for you, and all built-in models are linked with this <code>Base</code>. Therefore, your models must be created based on it. Otherwise, the corresponded table will not be created.</p> <p>To do so, follow the below example:</p> <pre><code>from FasterAPI.models import Base\n\nclass MyModel(Base):\n    __tablename__ = \"mymodels\"\n    # attributes\n</code></pre> <p>Upon on starting the server, a lifespan function will create all tables for you.</p>"},{"location":"guides/dependencies/","title":"Dependencies","text":"<p><code>FasterAPI</code> comes with multiple pre-built dependencies for assisting user authentication.</p>"},{"location":"guides/dependencies/#autenticated","title":"autenticated","text":"<p>A dependency function to authenticate the user.</p> Source code in <code>FasterAPI\\dependencies.py</code> <pre><code>async def authenticated(\n    request: Request,\n    security_scopes: SecurityScopes,\n    token: Annotated[str, Depends(oauth2_scheme)],\n    db: Annotated[Session, Depends(get_db)],\n):\n    \"\"\"A dependency function to authenticate the user.\"\"\"\n\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    multi_session_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Multiple sessions are not allowed\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    scope_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Insufficient privileges\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    jwt_exception = HTTPException(\n        status_code=status.HTTP_406_NOT_ACCEPTABLE,\n        detail=\"Invalid JWT token\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    jwt_expired_exception = HTTPException(\n        status_code=status.HTTP_406_NOT_ACCEPTABLE,\n        detail=\"JWT token has expired\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    blacklisted_token = (\n        db.query(BlacklistedToken).filter(BlacklistedToken.token == token).first()\n    )\n    if blacklisted_token:\n        raise jwt_exception\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload[\"sub\"]\n        expiration = datetime.fromtimestamp(payload[\"exp\"])\n    except JWTError:\n        raise jwt_exception\n    if expiration &lt; datetime.now():\n        raise jwt_expired_exception\n    user = db.query(User).filter(User.username == username).first()\n    if user is None:\n        raise credentials_exception\n    user_privileges = [privilege.privilege for privilege in user.privileges]\n    if not set(security_scopes.scopes).issubset(set(user_privileges)):\n        raise scope_exception\n    active_session = (\n        db.query(ActiveSession).filter(ActiveSession.username == username).first()\n    )\n    if ALLOW_MULTI_SESSIONS is False:\n        if request.client.host != str(active_session.client):  # type: ignore\n            raise multi_session_exception\n    return user\n</code></pre> <p>This dependency can be used on any FastAPI endpoints to secure it that only authenticated user can access. To be authenticated, the user request must contains \"Authorization: Bear XXXX\", where \"XXXX\" is the JWT token obtained after login.</p>"},{"location":"guides/dependencies/#is_superuser","title":"is_superuser","text":"<p>A dependency function to check if the user is a superuser.</p> Source code in <code>FasterAPI\\dependencies.py</code> <pre><code>async def is_superuser(user: Annotated[User, Depends(authenticated)]):\n    \"\"\"A dependency function to check if the user is a superuser.\"\"\"\n    if not user.is_superuser:  # type: ignore\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"The user doesn't have enough privileges\",\n        )\n    return user\n</code></pre> <p>This dependency will secure the endpoint that only authenticated user can access, and the user also must be a superuser.</p>"},{"location":"guides/dependencies/#scope","title":"scope","text":"<p>FasterAPI implemented the Oauth2 scope but it is verified against the user privileges. It means the scopes inside the JWT will always be the user's privileges. Therefore, you can use the scope header to verify against the user privilege. For example:</p> <pre><code>@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(authenticated, scopes=[\"items\"])]\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n</code></pre> <p>If the user does not have priviledge \"items\", then it will be refused to access endpoint \"/users/me/items/\". Dependency \"is_superuser\" works in the similar manner.</p>"}]}